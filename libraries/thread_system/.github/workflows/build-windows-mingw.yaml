name: Build-Windows-MinGW

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_windows_mingw:
    runs-on: windows-latest
    timeout-minutes: 60
    env:
      BUILD_TYPE: Debug
    
    steps:
      - name: Clean workspace
        shell: pwsh
        run: |
          if (Test-Path .git) {
            Remove-Item -Recurse -Force .git
          }
          if (Test-Path .github) {
            Remove-Item -Recurse -Force .github
          }

      - name: Configure git
        shell: pwsh
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global core.longpaths true
      
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: kcenon/thread_system
          persist-credentials: true
          clean: true
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup MinGW
        shell: pwsh
        run: |
          choco install mingw --version=12.2.0 -y
          $mingwPath = "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin"
          echo "$mingwPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          $env:PATH = "$mingwPath;$env:PATH"
          refreshenv
          gcc --version
          g++ --version
          mingw32-make --version

      - name: Install CMake
        shell: pwsh
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          refreshenv
          cmake --version

      - name: Install Ninja
        shell: pwsh
        run: |
          choco install ninja -y
          refreshenv
          ninja --version

      - name: Cache vcpkg
        uses: actions/cache@v3
        id: vcpkg-cache
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            !${{ github.workspace }}/vcpkg/buildtrees
            !${{ github.workspace }}/vcpkg/packages
            !${{ github.workspace }}/vcpkg/downloads
          key: ${{ runner.os }}-mingw-vcpkg-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-mingw-vcpkg-

      - name: Cache vcpkg installed
        uses: actions/cache@v3
        id: vcpkg-installed
        with:
          path: ${{ github.workspace }}/vcpkg_installed
          key: ${{ runner.os }}-mingw-vcpkg-installed-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-mingw-vcpkg-installed-

      - name: Set up vcpkg
        shell: pwsh
        run: |
          if (!(Test-Path -Path .\vcpkg)) {
            git clone https://github.com/Microsoft/vcpkg.git
          } else {
            Push-Location .\vcpkg
            git pull
            Pop-Location
          }
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg.exe integrate install

      - name: Install dependencies with vcpkg
        if: steps.vcpkg-installed.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          .\vcpkg\vcpkg.exe install --x-manifest-root=. --x-install-root=${{ github.workspace }}/vcpkg_installed --triplet x64-mingw-dynamic

      - name: Cache CMake build
        uses: actions/cache@v3
        id: cmake-cache
        with:
          path: |
            ${{ github.workspace }}/build
          key: ${{ runner.os }}-cmake-mingw-${{ hashFiles('CMakeLists.txt', 'vcpkg.json') }}-${{ env.BUILD_TYPE }}
          restore-keys: |
            ${{ runner.os }}-cmake-mingw-

      - name: Prepare build directory
        shell: pwsh
        run: |
          if (Test-Path build) {
            Remove-Item -Recurse -Force build
          }
          New-Item -ItemType Directory -Force -Path build | Out-Null

      - name: Build application
        shell: pwsh
        run: |
          Push-Location build
          $env:CC = "gcc"
          $env:CXX = "g++"
          & cmake .. -G "Ninja" `
            "-DCMAKE_C_COMPILER=gcc" `
            "-DCMAKE_CXX_COMPILER=g++" `
            "-DCMAKE_MAKE_PROGRAM=ninja" `
            "-DCMAKE_BUILD_TYPE=Debug" `
            "-DCMAKE_INSTALL_PREFIX=../target" `
            "-DCMAKE_TOOLCHAIN_FILE=$env:GITHUB_WORKSPACE\vcpkg\scripts\buildsystems\vcpkg.cmake" `
            "-DVCPKG_TARGET_TRIPLET=x64-mingw-dynamic"

          if ($LASTEXITCODE -ne 0) {
              Write-Error "CMake configuration failed"
              exit 1
          }

          cmake --build . --config Debug --parallel $env:NUMBER_OF_PROCESSORS
          Pop-Location

      - name: Cache built libraries
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/build
          key: ${{ runner.os }}-built-libs-mingw-${{ hashFiles('CMakeLists.txt', 'vcpkg.json') }}-Debug
          restore-keys: |
            ${{ runner.os }}-built-libs-mingw-
