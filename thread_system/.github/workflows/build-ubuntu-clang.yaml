name: Build-Ubuntu-Clang

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_linux_clang:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      BUILD_TYPE: Debug
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: kcenon/thread_system
          persist-credentials: true
          clean: true
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y cmake build-essential gdb pkg-config curl zip unzip tar clang autoconf automake autoconf-archive ninja-build
          sudo apt install -y libgtest-dev libgmock-dev

      - name: Check architecture
        run: |
          if [ "$(uname -m)" = "aarch64" ]; then
            echo "VCPKG_FORCE_SYSTEM_BINARIES=arm" >> $GITHUB_ENV
          fi
      
      - name: Cache vcpkg
        uses: actions/cache@v3
        id: vcpkg-cache
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            !${{ github.workspace }}/vcpkg/buildtrees
            !${{ github.workspace }}/vcpkg/packages
            !${{ github.workspace }}/vcpkg/downloads
          key: ${{ runner.os }}-clang-vcpkg-${{ hashFiles('vcpkg.json') }}

      - name: Set up vcpkg
        run: |
          if [ ! -d "vcpkg" ]; then
            git clone https://github.com/Microsoft/vcpkg.git
          fi
          cd vcpkg
          git pull
          ./bootstrap-vcpkg.sh
          cd ..

      - name: Cache vcpkg installed
        uses: actions/cache@v3
        id: vcpkg-installed
        with:
          path: ${{ github.workspace }}/vcpkg_installed
          key: ${{ runner.os }}-clang-vcpkg-installed-${{ hashFiles('vcpkg.json') }}

      - name: Install dependencies with vcpkg
        if: steps.vcpkg-installed.outputs.cache-hit != 'true'
        run: |
          ./vcpkg/vcpkg install --x-manifest-root=. --x-install-root=${{ github.workspace }}/vcpkg_installed

      - name: Cache CMake build
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/build
          key: ${{ runner.os }}-clang-cmake-${{ hashFiles('CMakeLists.txt', 'vcpkg.json') }}-${{ env.BUILD_TYPE }}
          restore-keys: |
            ${{ runner.os }}-clang-cmake-

      - name: Prepare build directory
        run: |
          rm -rf build
          mkdir -p build

      - name: Build application with Clang
        run: |
          cd build
          cmake .. \
            -G Ninja \
            -DBUILD_TESTS=ON \
            -DCMAKE_INSTALL_PREFIX="../target" \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_TOOLCHAIN_FILE="$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake" \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++
          cmake --build . --parallel

      - name: Cache built libraries
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/build
          key: ${{ runner.os }}-clang-built-libs-${{ hashFiles('CMakeLists.txt', 'vcpkg.json') }}-${{ env.BUILD_TYPE }}
          restore-keys: |
            ${{ runner.os }}-clang-built-libs-
