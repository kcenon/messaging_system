name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.os }} / ${{ matrix.compiler }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    env:
      BUILD_TYPE: Debug
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
      VCPKG_FEATURE_FLAGS: "manifests,registries,versions,binarycaching"

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            compiler: gcc
            triplet: x64-linux
          - os: ubuntu-22.04
            compiler: clang
            triplet: x64-linux
          - os: macos-13
            compiler: clang
            triplet: x64-osx
          - os: windows-2022
            compiler: msvc
            triplet: x64-windows

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        persist-credentials: true
        clean: true
        fetch-depth: 1
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install -y cmake build-essential gdb pkg-config curl zip unzip tar autoconf automake autoconf-archive ninja-build
        sudo apt install -y clang lld
        sudo apt install -y libgtest-dev libgmock-dev libyaml-cpp-dev

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install ninja pkg-config curl zip unzip autoconf automake autoconf-archive yaml-cpp

    - name: Setup Visual Studio (Windows)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v2

    - name: Setup Visual Studio environment (Windows)
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Check architecture (Linux)
      if: runner.os == 'Linux'
      run: |
        if [ "$(uname -m)" = "aarch64" ]; then
          echo "VCPKG_FORCE_SYSTEM_BINARIES=arm" >> $GITHUB_ENV
        fi

    - name: Cache vcpkg
      uses: actions/cache@v4
      id: vcpkg-cache
      with:
        path: |
          ${{ github.workspace }}/vcpkg
          !${{ github.workspace }}/vcpkg/buildtrees
          !${{ github.workspace }}/vcpkg/packages
          !${{ github.workspace }}/vcpkg/downloads
        key: ${{ runner.os }}-${{ matrix.compiler }}-vcpkg-tool-${{ hashFiles('vcpkg.json') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.compiler }}-vcpkg-tool-

    - name: Set up vcpkg (Unix)
      if: runner.os != 'Windows'
      run: |
        if [ ! -d "vcpkg" ]; then
          git clone https://github.com/Microsoft/vcpkg.git
        fi
        cd vcpkg
        if [ "${{ steps.vcpkg-cache.outputs.cache-hit }}" != "true" ]; then
          git pull
          ./bootstrap-vcpkg.sh
        fi
        cd ..

    - name: Set up vcpkg (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        if (!(Test-Path "vcpkg")) {
          git clone https://github.com/Microsoft/vcpkg.git
        }
        cd vcpkg
        if ("${{ steps.vcpkg-cache.outputs.cache-hit }}" -ne "true") {
          git pull
          .\bootstrap-vcpkg.bat
        }
        cd ..

    - name: Determine vcpkg commit (Unix)
      if: runner.os != 'Windows'
      id: vcpkg-commit-unix
      run: echo "commit=$(git -C vcpkg rev-parse HEAD)" >> $GITHUB_OUTPUT

    - name: Determine vcpkg commit (Windows)
      if: runner.os == 'Windows'
      id: vcpkg-commit-windows
      shell: pwsh
      run: |
        $commit = git -C vcpkg rev-parse HEAD
        "commit=$commit" >> $env:GITHUB_OUTPUT

    - name: Cache vcpkg installed
      uses: actions/cache@v4
      id: vcpkg-installed
      with:
        path: ${{ github.workspace }}/vcpkg_installed
        key: ${{ runner.os }}-${{ matrix.compiler }}-vcpkg-installed-${{ matrix.triplet }}-${{ hashFiles('vcpkg.json', 'vcpkg-configuration.json') }}-${{ steps.vcpkg-commit-unix.outputs.commit || steps.vcpkg-commit-windows.outputs.commit }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.compiler }}-vcpkg-installed-${{ matrix.triplet }}-

    - name: Install dependencies with vcpkg (Unix)
      if: runner.os != 'Windows' && steps.vcpkg-installed.outputs.cache-hit != 'true'
      run: |
        ./vcpkg/vcpkg install --x-manifest-root=. --x-install-root=${{ github.workspace }}/vcpkg_installed --triplet ${{ matrix.triplet }} || echo "vcpkg install failed, will use system libraries"

    - name: Install dependencies with vcpkg (Windows)
      if: runner.os == 'Windows' && steps.vcpkg-installed.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        try {
          .\vcpkg\vcpkg install --x-manifest-root=. --x-install-root=${{ github.workspace }}\vcpkg_installed --triplet ${{ matrix.triplet }}
        } catch {
          Write-Host "vcpkg install failed, will use system libraries"
        }

    - name: Prepare build directory
      if: runner.os != 'Windows'
      run: |
        rm -rf build
        mkdir -p build

    - name: Prepare build directory (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        if (Test-Path build) { Remove-Item -Recurse -Force build }
        New-Item -ItemType Directory -Path build

    - name: Configure CMake (Unix - with vcpkg)
      if: runner.os != 'Windows'
      id: configure_unix
      continue-on-error: true
      run: |
        cd build
        cmake .. \
          -G Ninja \
          -DMESSAGING_BUILD_TESTS=ON \
          -DMESSAGING_BUILD_EXAMPLES=OFF \
          -DMESSAGING_USE_FETCHCONTENT=ON \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DCMAKE_TOOLCHAIN_FILE="${GITHUB_WORKSPACE}/vcpkg/scripts/buildsystems/vcpkg.cmake" \
          -DCMAKE_C_COMPILER=${{ matrix.compiler == 'gcc' && 'gcc' || 'clang' }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.compiler == 'gcc' && 'g++' || 'clang++' }}

    - name: Configure CMake (Unix - fallback)
      if: runner.os != 'Windows' && steps.configure_unix.outcome != 'success'
      run: |
        cd build
        cmake .. \
          -G Ninja \
          -DMESSAGING_BUILD_TESTS=ON \
          -DMESSAGING_BUILD_EXAMPLES=OFF \
          -DMESSAGING_USE_FETCHCONTENT=ON \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DCMAKE_C_COMPILER=${{ matrix.compiler == 'gcc' && 'gcc' || 'clang' }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.compiler == 'gcc' && 'g++' || 'clang++' }}

    - name: Configure CMake (Windows - with vcpkg)
      if: runner.os == 'Windows'
      id: configure_windows
      continue-on-error: true
      shell: pwsh
      run: |
        cd build
        cmake .. `
          -G "Visual Studio 17 2022" `
          -A x64 `
          -DMESSAGING_BUILD_TESTS=ON `
          -DMESSAGING_BUILD_EXAMPLES=OFF `
          -DMESSAGING_USE_FETCHCONTENT=ON `
          -DCMAKE_BUILD_TYPE=$env:BUILD_TYPE `
          -DCMAKE_TOOLCHAIN_FILE="$env:GITHUB_WORKSPACE\vcpkg\scripts\buildsystems\vcpkg.cmake"

    - name: Configure CMake (Windows - fallback)
      if: runner.os == 'Windows' && steps.configure_windows.outcome != 'success'
      shell: pwsh
      run: |
        cd build
        cmake .. `
          -G "Visual Studio 17 2022" `
          -A x64 `
          -DMESSAGING_BUILD_TESTS=ON `
          -DMESSAGING_BUILD_EXAMPLES=OFF `
          -DMESSAGING_USE_FETCHCONTENT=ON `
          -DCMAKE_BUILD_TYPE=$env:BUILD_TYPE

    - name: Build (Unix)
      if: runner.os != 'Windows'
      run: |
        cd build
        cmake --build . --parallel

    - name: Build (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        cd build
        cmake --build . --config $env:BUILD_TYPE --parallel

    - name: Run tests (Unix)
      if: runner.os != 'Windows'
      run: |
        cd build
        ctest --output-on-failure || echo "Some tests failed"

    - name: Run tests (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        cd build
        ctest -C $env:BUILD_TYPE --output-on-failure
        if ($LASTEXITCODE -ne 0) { Write-Host "Some tests failed" }

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.compiler }}
        path: |
          build/Testing/
          build/**/*.log
        retention-days: 7
        if-no-files-found: ignore

    - name: Upload build artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-failure-${{ matrix.os }}-${{ matrix.compiler }}
        path: |
          build/CMakeFiles/CMakeOutput.log
          build/CMakeFiles/CMakeError.log
          build/**/*.log
        retention-days: 7
        if-no-files-found: ignore

  # Sanitizer testing disabled temporarily due to fmt dependency issues
  # Will be re-enabled once thread_system fmt dependency is resolved
